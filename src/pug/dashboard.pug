extends layout

block content
  // Add top margin to account for fixed navigation
  .dashboard-container(style="margin-top: 80px;")
    .dashboard-header
      .container
        .row.align-items-center
          .col-md-6
            h1.dashboard-title Welcome, #{user ? user.displayName : 'User'}!
            p.dashboard-subtitle Manage your recovery journey and access resources
          
    
    .dashboard-content
      .container
        .row
          .col-lg-8
            .dashboard-card
              h3.card-title Recovery Progress
              .progress-section
                .progress-item
                  h5 Sobriety Counter
                  .sobriety-counter
                    span.counter-number#sobrietyDays 0
                    span.counter-label days
                  p.counter-subtitle Since your last drink or drug use
                  
                  .sobriety-date-picker
                    label(for="sobrietyDate") Update Sobriety Date:
                    input.form-control#sobrietyDate(type="date" name="sobrietyDate")
                    button.btn.btn-primary.btn-sm#updateSobrietyDate Update
                
                .progress-item
                  h5 Recovery Milestones
                  .milestones-list#milestonesList
                    // Milestones will be loaded dynamically
                  
                  .add-milestone
                    button.btn.btn-success#addMilestoneBtn(type="button") + Add Milestone
            
            .dashboard-card
              h3.card-title Community Resources
              .resources-grid
                .resource-item
                  i.bi.bi-people
                  h6 Support Groups
                  p Find local AA/NA meetings and support groups
                  a.btn.btn-outline-primary.btn-sm(href="/community-engagement-sober-activities.html") Explore
                
                .resource-item
                  i.bi.bi-heart-pulse
                  h6 Treatment Centers
                  p Access addiction treatment and mental health resources
                  a.btn.btn-outline-primary.btn-sm(href="/addiction-treatments-support.html") Explore
                
                .resource-item
                  i.bi.bi-house
                  h6 Housing Support
                  p Find sober housing and shelter options
                  a.btn.btn-outline-primary.btn-sm(href="/shelter-housing.html") Explore
          
          .col-lg-4
            .dashboard-card
              h3.card-title Quick Actions
              .quick-actions
                a.btn.btn-primary.btn-block(href="/resource-directory.html#emergency-help")
                  i.bi.bi-exclamation-triangle
                  Emergency Help
                
                a.btn.btn-outline-primary.btn-block(href="/resource-directory.html")
                  i.bi.bi-search
                  Resource Directory
                
                a.btn.btn-outline-primary.btn-block(href="/community-engagement-sober-activities.html")
                  i.bi.bi-people
                  Community Forum
                
                a.btn.btn-outline-primary.btn-block(href="/donations.html")
                  i.bi.bi-heart
                  Support Our Mission
            
            .dashboard-card
              h3.card-title Profile Settings
              .profile-settings
                .form-group
                  label(for="profileDisplayName") Display Name
                  input.form-control#profileDisplayName(type="text" value=user ? user.displayName : "")
                
                .form-group
                  label(for="profileBio") Bio
                  textarea.form-control#profileBio(rows="3" placeholder="Tell us about yourself...")
                
                .form-group
                  label(for="profilePrivacyLevel") Privacy Level
                  select.form-control#profilePrivacyLevel
                    option(value="public") Public
                    option(value="standard") Standard
                    option(value="high") High
                
                button.btn.btn-primary.btn-block#updateProfile Update Profile

block scripts
  script.
    // Dashboard functionality with Supabase integration
    let supabase;
    let currentUser = null;
    
    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', async function() {
      await initializeSupabase();
      await initializeDashboard();
      setupEventListeners();
    });
    
    async function initializeSupabase() {
      try {
        // Get Supabase credentials from config
        const supabaseUrl = window.APP_CONFIG?.SUPABASE_URL || '';
        const supabaseKey = window.APP_CONFIG?.SUPABASE_ANON_KEY || '';
        
        if (!supabaseUrl || !supabaseKey) {
          console.error('Supabase credentials not found');
          return;
        }
        
        // Create Supabase client
        supabase = window.supabase.createClient(supabaseUrl, supabaseKey);
        console.log('Supabase client initialized');
        
        // Check authentication state
        const { data: { session } } = await supabase.auth.getSession();
        if (session) {
          currentUser = session.user;
          updateUserDisplay();
        }
      } catch (error) {
        console.error('Failed to initialize Supabase:', error);
      }
    }
    
    async function initializeDashboard() {
      try {
        if (!supabase) return;
        
        // Load user profile data
        await loadProfile();
        
        // Load milestones
        await loadMilestones();
        
        // Calculate sobriety days
        calculateSobrietyDays();
      } catch (error) {
        console.error('Failed to initialize dashboard:', error);
      }
    }
    
    function setupEventListeners() {
      // Update sobriety date
      document.getElementById('updateSobrietyDate').addEventListener('click', handleUpdateSobrietyDate);
      
      // Add milestone
      document.getElementById('addMilestoneBtn').addEventListener('click', showAddMilestoneModal);
      
      // Update profile
      document.getElementById('updateProfile').addEventListener('click', handleUpdateProfile);
    }
    
    async function handleUpdateSobrietyDate() {
      try {
        const sobrietyDate = document.getElementById('sobrietyDate').value;
        if (!sobrietyDate) {
          showMessage('Please select a date', 'warning');
          return;
        }
        
        if (!supabase || !currentUser) {
          showMessage('Please log in to update your sobriety date', 'warning');
          return;
        }
        
        // Update profile in Supabase
        const { error } = await supabase
          .from('profiles')
          .upsert({
            user_id: currentUser.id,
            sobriety_date: sobrietyDate,
            updated_at: new Date().toISOString()
          });
        
        if (error) throw error;
        
        showMessage('Sobriety date updated successfully!', 'success');
        calculateSobrietyDays();
      } catch (error) {
        console.error('Failed to update sobriety date:', error);
        showMessage('Failed to update sobriety date', 'danger');
      }
    }
    
    async function loadProfile() {
      try {
        if (!supabase || !currentUser) return;
        
        const { data, error } = await supabase
          .from('profiles')
          .select('*')
          .eq('user_id', currentUser.id)
          .single();
        
        if (error && error.code !== 'PGRST116') throw error;
        
        if (data) {
          // Populate profile fields
          document.getElementById('profileDisplayName').value = data.display_name || '';
          document.getElementById('profileBio').value = data.bio || '';
          document.getElementById('profilePrivacyLevel').value = data.privacy_level || 'standard';
          // Update header with profile display name when available
          if (data.display_name) {
            document.querySelector('.dashboard-title').textContent = `Welcome, ${data.display_name}!`;
          }
          
          // Set sobriety date if available
          if (data.sobriety_date) {
            document.getElementById('sobrietyDate').value = data.sobriety_date;
          }
        }
      } catch (error) {
        console.error('Failed to load profile:', error);
      }
    }
    
    async function loadMilestones() {
      try {
        if (!supabase || !currentUser) return;
        
        const { data, error } = await supabase
          .from('recovery_milestones')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });
        
        if (error) throw error;
        
        displayMilestones(data || []);
      } catch (error) {
        console.error('Failed to load milestones', error);
      }
    }
    
    function displayMilestones(milestones) {
      const milestonesList = document.getElementById('milestonesList');
      milestonesList.innerHTML = '';
      
      if (milestones.length === 0) {
        milestonesList.innerHTML = '<p class="text-muted">No milestones yet. Add your first one!</p>';
        return;
      }
      
      milestones.forEach(milestone => {
        const milestoneItem = document.createElement('div');
        milestoneItem.className = 'milestone-item';
        milestoneItem.innerHTML = `
          <div class="milestone-content">
            <h6>${milestone.title}</h6>
            <p>${milestone.description}</p>
            <small class="text-muted">${formatDate(milestone.created_at)}</small>
          </div>
          <div class="milestone-actions">
            <button class="btn btn-sm btn-outline-primary" onclick="editMilestone('${milestone.id}')">Edit</button>
            <button class="btn btn-sm btn-outline-danger" onclick="deleteMilestone('${milestone.id}')">Delete</button>
          </div>
        `;
        milestonesList.appendChild(milestoneItem);
      });
    }
    
    function showAddMilestoneModal() {
      const title = prompt('Enter milestone title:');
      if (!title) return;
      
      const description = prompt('Enter milestone description:');
      if (!description) return;
      
      addMilestone(title, description);
    }
    
    async function addMilestone(title, description) {
      try {
        if (!supabase || !currentUser) {
          showMessage('Please log in to add milestones', 'warning');
          return;
        }
        
        const { error } = await supabase
          .from('recovery_milestones')
          .insert({
            user_id: currentUser.id,
            title: title,
            description: description,
            created_at: new Date().toISOString()
          });
        
        if (error) throw error;
        
        showMessage('Milestone added successfully!', 'success');
        await loadMilestones();
      } catch (error) {
        console.error('Failed to add milestone:', error);
        showMessage('Failed to add milestone', 'danger');
      }
    }
    
    async function editMilestone(milestoneId) {
      try {
        if (!supabase || !currentUser) return;
        
        const { data, error } = await supabase
          .from('recovery_milestones')
          .select('*')
          .eq('id', milestoneId)
          .eq('user_id', currentUser.id)
          .single();
        
        if (error) throw error;
        
        const newTitle = prompt('Enter new title:', data.title);
        if (!newTitle) return;
        
        const newDescription = prompt('Enter new description:', data.description);
        if (!newDescription) return;
        
        const { error: updateError } = await supabase
          .from('recovery_milestones')
          .update({
            title: newTitle,
            description: newDescription,
            updated_at: new Date().toISOString()
          })
          .eq('id', milestoneId)
          .eq('user_id', currentUser.id);
        
        if (updateError) throw updateError;
        
        showMessage('Milestone updated successfully!', 'success');
        await loadMilestones();
      } catch (error) {
        console.error('Failed to edit milestone:', error);
        showMessage('Failed to edit milestone', 'danger');
      }
    }
    
    async function deleteMilestone(milestoneId) {
      try {
        if (!confirm('Are you sure you want to delete this milestone?')) return;
        
        if (!supabase || !currentUser) return;
        
        const { error } = await supabase
          .from('recovery_milestones')
          .delete()
          .eq('id', milestoneId)
          .eq('user_id', currentUser.id);
        
        if (error) throw error;
        
        showMessage('Milestone deleted successfully!', 'success');
        await loadMilestones();
      } catch (error) {
        console.error('Failed to delete milestone:', error);
        showMessage('Failed to delete milestone', 'danger');
      }
    }
    
    async function handleUpdateProfile() {
      try {
        if (!supabase || !currentUser) {
          showMessage('Please log in to update your profile', 'warning');
          return;
        }
        
        const displayName = document.getElementById('profileDisplayName').value;
        const bio = document.getElementById('profileBio').value;
        const privacyLevel = document.getElementById('profilePrivacyLevel').value;
        
        const { error } = await supabase
          .from('profiles')
          .upsert({
            user_id: currentUser.id,
            display_name: displayName,
            bio: bio,
            privacy_level: privacyLevel,
            updated_at: new Date().toISOString()
          });
        
        if (error) throw error;
        
        showMessage('Profile updated successfully!', 'success');
      } catch (error) {
        console.error('Failed to update profile:', error);
        showMessage('Failed to update profile', 'danger');
      }
    }
    
    function calculateSobrietyDays() {
      const sobrietyDate = document.getElementById('sobrietyDate').value;
      if (!sobrietyDate) {
        document.getElementById('sobrietyDays').textContent = '0';
        return;
      }
      
      const startDate = new Date(sobrietyDate);
      const today = new Date();
      const timeDiff = today.getTime() - startDate.getTime();
      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
      
      document.getElementById('sobrietyDays').textContent = Math.max(0, daysDiff);
    }
    
    function updateUserDisplay() {
      if (currentUser) {
        const profileInput = document.getElementById('profileDisplayName');
        const profileName = profileInput && profileInput.value ? profileInput.value.trim() : null;
        const metaName =
          currentUser.user_metadata?.full_name ||
          currentUser.user_metadata?.display_name ||
          currentUser.user_metadata?.name ||
          currentUser.user_metadata?.user_name ||
          'User';
        const displayName = profileName || metaName;
        document.querySelector('.dashboard-title').textContent = `Welcome, ${displayName}!`;
      }
    }
    
    function formatDate(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      const diffTime = Math.abs(now - date);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
      if (diffDays === 0) return 'Today';
      if (diffDays === 1) return 'Yesterday';
      if (diffDays < 7) return `${diffDays} days ago`;
      if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;
      if (diffDays < 365) return `${Math.floor(diffDays / 7)} months ago`;
      return date.toLocaleDateString();
    }
    
    function showMessage(message, type) {
      const alertDiv = document.createElement('div');
      alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
      alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      
      const container = document.querySelector('.dashboard-content .container');
      container.insertBefore(alertDiv, container.firstChild);
      
      setTimeout(() => {
        if (alertDiv.parentNode) {
          alertDiv.remove();
        }
      }, 5000);
    } 