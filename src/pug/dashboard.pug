extends layout

block content
  // Dashboard Container with proper spacing for fixed navigation
  .dashboard-container
    // Hero Banner Section
    .dashboard-hero
      .container
        .row.justify-content-center.text-center
          .col-lg-8
            h1.dashboard-hero-title Welcome, #{user ? user.displayName : 'Get Sober Spokane'}!
            p.dashboard-hero-subtitle Manage your recovery journey and access resources
    
    // Main Dashboard Content
    .dashboard-content
      .container
        // Sign In Form (shown when not authenticated)
        #signInForm.dashboard-card.auth-card(style="display: none;")
          .row.justify-content-center
            .col-lg-6
              h3.card-title.text-center Sign In to Your Dashboard
              p.text-center.text-muted Access your recovery progress and manage your journey
              
              form#loginForm
                .mb-3
                  label.form-label(for="email") Email Address
                  input.form-control#email(type="email" name="email" required)
                .mb-3
                  label.form-label(for="password") Password
                  input.form-control#password(type="password" name="password" required)
                .mb-3
                  button.btn.btn-primary.w-100#signInBtn(type="submit") Sign In
                  button.btn.btn-outline-secondary.w-100.mt-2#signUpBtn(type="button") Create Account
                
                .text-center.mt-3
                  a.text-muted(href="#" id="forgotPassword") Forgot your password?
        
        // Dashboard Content (shown when authenticated)
        #dashboardContent(style="display: none;")
          .row
            // Left Column - Recovery Progress
            .col-lg-8.mb-4
              .dashboard-card.recovery-card
                h3.card-title Recovery Progress
                
                // Sobriety Counter Section
                .sobriety-section
                  h5.section-label Sobriety Counter
                  .sobriety-counter
                    .counter-display
                      span.counter-number#sobrietyDays 0
                      span.counter-label days
                    p.counter-subtitle Since your last drink or drug use
                  
                  // Sobriety Date Update
                  .sobriety-date-update
                    label(for="sobrietyDate") Update Sobriety Date:
                    .date-input-group
                      input.form-control#sobrietyDate(type="date" name="sobrietyDate")
                      button.btn.btn-primary#updateSobrietyDate Update
                
                // Recovery Milestones Section
                .milestones-section
                  h5.section-label Recovery Milestones
                  .milestones-list#milestonesList
                    // Milestones will be loaded dynamically
                  .add-milestone
                    button.btn.btn-success#addMilestoneBtn(type="button") + Add Milestone
            
            // Right Column - Quick Actions
            .col-lg-4.mb-4
              .dashboard-card.quick-actions-card
                h3.card-title Quick Actions
                .quick-actions-list
                  a.quick-action-btn.emergency-btn(href="/get-sober-spokane/resource-directory.html#emergency-help")
                    .action-icon
                      i.bi.bi-exclamation-triangle
                    .action-text Emergency Help
                  
                  a.quick-action-btn(href="/get-sober-spokane/resource-directory.html")
                    .action-icon
                      i.bi.bi-search
                    .action-text Resource Directory
                  
                  a.quick-action-btn(href="/get-sober-spokane/community-engagement-sober-activities.html")
                    .action-icon
                      i.bi.bi-people
                    .action-text Community Forum
                  
                  a.quick-action-btn(href="/get-sober-spokane/donations.html")
                    .action-icon
                      i.bi.bi-heart
                    .action-text Support Our Mission

block scripts
  script.
    // Dashboard functionality with Supabase integration
    let supabase;
    let currentUser = null;
    
    // Initialize dashboard
    document.addEventListener('DOMContentLoaded', async function() {
      await initializeSupabase();
      await initializeDashboard();
      setupEventListeners();
    });
    
    async function initializeSupabase() {
      try {
        // Get Supabase credentials from config
        const supabaseUrl = window.APP_CONFIG?.SUPABASE_URL || '';
        const supabaseKey = window.APP_CONFIG?.SUPABASE_ANON_KEY || '';
        
        if (!supabaseUrl || !supabaseKey) {
          console.error('Supabase credentials not found');
          return;
        }
        
        // Create Supabase client
        supabase = window.supabase.createClient(supabaseUrl, supabaseKey);
        console.log('Supabase client initialized');
        
        // Check authentication state
        const { data: { session } } = await supabase.auth.getSession();
        if (session) {
          currentUser = session.user;
          updateUserDisplay();
        }
      } catch (error) {
        console.error('Failed to initialize Supabase:', error);
      }
    }
    
    async function initializeDashboard() {
      try {
        if (!supabase) return;
        
        // Check if user is authenticated
        if (currentUser) {
          // User is authenticated, show dashboard
          showDashboardContent();
          
          // Load user profile data
          await loadProfile();
          
          // Load milestones
          await loadMilestones();
          
          // Calculate sobriety days
          calculateSobrietyDays();
        } else {
          // User is not authenticated, show sign-in form
          showSignInForm();
        }
      } catch (error) {
        console.error('Failed to initialize dashboard:', error);
        // Show sign-in form on error
        showSignInForm();
      }
    }
    
    function setupEventListeners() {
      // Update sobriety date
      document.getElementById('updateSobrietyDate').addEventListener('click', handleUpdateSobrietyDate);
      
      // Add milestone
      document.getElementById('addMilestoneBtn').addEventListener('click', showAddMilestoneModal);
      
      // Sign-in form
      document.getElementById('loginForm').addEventListener('submit', handleSignIn);
      document.getElementById('signUpBtn').addEventListener('click', handleSignUp);
      document.getElementById('forgotPassword').addEventListener('click', handleForgotPassword);
    }
    
    async function handleUpdateSobrietyDate() {
      try {
        const sobrietyDate = document.getElementById('sobrietyDate').value;
        if (!sobrietyDate) {
          showMessage('Please select a date', 'warning');
          return;
        }
        
        if (!supabase || !currentUser) {
          showMessage('Please log in to update your sobriety date', 'warning');
          return;
        }
        
        // Update profile in Supabase
        const { error } = await supabase
          .from('profiles')
          .upsert({
            user_id: currentUser.id,
            sobriety_date: sobrietyDate,
            updated_at: new Date().toISOString()
          });
        
        if (error) throw error;
        
        showMessage('Sobriety date updated successfully!', 'success');
        calculateSobrietyDays();
      } catch (error) {
        console.error('Failed to update sobriety date:', error);
        showMessage('Failed to update sobriety date', 'danger');
      }
    }
    
    async function loadProfile() {
      try {
        if (!supabase || !currentUser) return;
        
        const { data, error } = await supabase
          .from('profiles')
          .select('*')
          .eq('user_id', currentUser.id)
          .single();
        
        if (error && error.code !== 'PGRST116') throw error;
        
        if (data) {
          // Update header with profile display name when available
          if (data.display_name) {
            document.querySelector('.dashboard-hero-title').textContent = `Welcome, ${data.display_name}!`;
          }
          
          // Set sobriety date if available
          if (data.sobriety_date) {
            document.getElementById('sobrietyDate').value = data.sobriety_date;
          }
        }
      } catch (error) {
        console.error('Failed to load profile:', error);
      }
    }
    
    async function loadMilestones() {
      try {
        if (!supabase || !currentUser) return;
        
        const { data, error } = await supabase
          .from('recovery_milestones')
          .select('*')
          .eq('user_id', currentUser.id)
          .order('created_at', { ascending: false });
        
        if (error) throw error;
        
        displayMilestones(data || []);
      } catch (error) {
        console.error('Failed to load milestones', error);
      }
    }
    
    function displayMilestones(milestones) {
      const milestonesList = document.getElementById('milestonesList');
      milestonesList.innerHTML = '';
      
      if (milestones.length === 0) {
        milestonesList.innerHTML = '<p class="text-muted">No milestones yet. Add your first one!</p>';
        return;
      }
      
      milestones.forEach(milestone => {
        const milestoneItem = document.createElement('div');
        milestoneItem.className = 'milestone-item';
        milestoneItem.innerHTML = `
          <div class="milestone-content">
            <h6>${milestone.title}</h6>
            <p>${milestone.description}</p>
            <small class="text-muted">${formatDate(milestone.created_at)}</small>
          </div>
          <div class="milestone-actions">
            <button class="btn btn-sm btn-outline-primary" onclick="editMilestone('${milestone.id}')">Edit</button>
            <button class="btn btn-sm btn-outline-danger" onclick="deleteMilestone('${milestone.id}')">Delete</button>
          </div>
        `;
        milestonesList.appendChild(milestoneItem);
      });
    }
    
    function showAddMilestoneModal() {
      const title = prompt('Enter milestone title:');
      if (!title) return;
      
      const description = prompt('Enter milestone description:');
      if (!description) return;
      
      addMilestone(title, description);
    }
    
    async function addMilestone(title, description) {
      try {
        if (!supabase || !currentUser) {
          showMessage('Please log in to add milestones', 'warning');
          return;
        }
        
        const { error } = await supabase
          .from('recovery_milestones')
          .insert({
            user_id: currentUser.id,
            title: title,
            description: description,
            created_at: new Date().toISOString()
          });
        
        if (error) throw error;
        
        showMessage('Milestone added successfully!', 'success');
        await loadMilestones();
      } catch (error) {
        console.error('Failed to add milestone:', error);
        showMessage('Failed to add milestone', 'danger');
      }
    }
    
    async function editMilestone(milestoneId) {
      try {
        if (!supabase || !currentUser) return;
        
        const { data, error } = await supabase
          .from('recovery_milestones')
          .select('*')
          .eq('id', milestoneId)
          .eq('user_id', currentUser.id)
          .single();
        
        if (error) throw error;
        
        const newTitle = prompt('Enter new title:', data.title);
        if (!newTitle) return;
        
        const newDescription = prompt('Enter new description:', data.description);
        if (!newDescription) return;
        
        const { error: updateError } = await supabase
          .from('recovery_milestones')
          .update({
            title: newTitle,
            description: newDescription,
            updated_at: new Date().toISOString()
          })
          .eq('id', milestoneId)
          .eq('user_id', currentUser.id);
        
        if (updateError) throw updateError;
        
        showMessage('Milestone updated successfully!', 'success');
        await loadMilestones();
      } catch (error) {
        console.error('Failed to edit milestone:', error);
        showMessage('Failed to edit milestone', 'danger');
      }
    }
    
    async function deleteMilestone(milestoneId) {
      try {
        if (!confirm('Are you sure you want to delete this milestone?')) return;
        
        if (!supabase || !currentUser) return;
        
        const { error } = await supabase
          .from('recovery_milestones')
          .delete()
          .eq('id', milestoneId)
          .eq('user_id', currentUser.id);
        
        if (error) throw error;
        
        showMessage('Milestone deleted successfully!', 'success');
        await loadMilestones();
      } catch (error) {
        console.error('Failed to delete milestone:', error);
        showMessage('Failed to delete milestone', 'danger');
      }
    }
    

    
    function calculateSobrietyDays() {
      const sobrietyDate = document.getElementById('sobrietyDate').value;
      if (!sobrietyDate) {
        document.getElementById('sobrietyDays').textContent = '0';
        return;
      }
      
      const startDate = new Date(sobrietyDate);
      const today = new Date();
      const timeDiff = today.getTime() - startDate.getTime();
      const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));
      
      document.getElementById('sobrietyDays').textContent = Math.max(0, daysDiff);
    }
    
    function updateUserDisplay() {
      if (currentUser) {
        const metaName =
          currentUser.user_metadata?.full_name ||
          currentUser.user_metadata?.display_name ||
          currentUser.user_metadata?.name ||
          currentUser.user_metadata?.user_name ||
          'Get Sober Spokane';
        const displayName = metaName;
        document.querySelector('.dashboard-hero-title').textContent = `Welcome, ${displayName}!`;
      }
    }
    
    function formatDate(dateString) {
      const date = new Date(dateString);
      const now = new Date();
      const diffTime = Math.abs(now - date);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
      if (diffDays === 0) return 'Today';
      if (diffDays === 1) return 'Yesterday';
      if (diffDays < 7) return `${diffDays} days ago`;
      if (diffDays < 30) return `${Math.floor(diffDays / 7)} weeks ago`;
      if (diffDays < 365) return `${Math.floor(diffDays / 7)} months ago`;
      return date.toLocaleDateString();
    }
    
    // Authentication UI functions
    function showSignInForm() {
      document.getElementById('signInForm').style.display = 'block';
      document.getElementById('dashboardContent').style.display = 'none';
    }
    
    function showDashboardContent() {
      document.getElementById('signInForm').style.display = 'none';
      document.getElementById('dashboardContent').style.display = 'block';
    }
    
    // Sign-in handler
    async function handleSignIn(e) {
      e.preventDefault();
      
      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;
      
      try {
        const { data, error } = await supabase.auth.signInWithPassword({
          email: email,
          password: password
        });
        
        if (error) throw error;
        
        currentUser = data.user;
        showMessage('Successfully signed in!', 'success');
        showDashboardContent();
        
        // Initialize dashboard for authenticated user
        await loadProfile();
        await loadMilestones();
        calculateSobrietyDays();
        
        // Update navigation
        updateNavigation();
        
      } catch (error) {
        console.error('Sign-in error:', error);
        showMessage('Sign-in failed: ' + error.message, 'danger');
      }
    }
    
    // Sign-up handler
    async function handleSignUp(e) {
      e.preventDefault();
      
      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;
      
      if (password.length < 6) {
        showMessage('Password must be at least 6 characters', 'warning');
        return;
      }
      
      try {
        const { data, error } = await supabase.auth.signUp({
          email: email,
          password: password
        });
        
        if (error) throw error;
        
        showMessage('Account created! Please check your email to verify your account.', 'success');
        
      } catch (error) {
        console.error('Sign-up error:', error);
        showMessage('Sign-up failed: ' + error.message, 'danger');
      }
    }
    
    // Forgot password handler
    async function handleForgotPassword(e) {
      e.preventDefault();
      
      const email = document.getElementById('email').value;
      if (!email) {
        showMessage('Please enter your email address', 'warning');
        return;
      }
      
      try {
        const { error } = await supabase.auth.resetPasswordForEmail(email);
        
        if (error) throw error;
        
        showMessage('Password reset email sent! Please check your inbox.', 'success');
        
      } catch (error) {
        console.error('Password reset error:', error);
        showMessage('Password reset failed: ' + error.message, 'danger');
      }
    }
    
    // Update navigation based on auth state
    function updateNavigation() {
      const loginNavItem = document.getElementById('navbarLogin');
      const logoutNavItem = document.getElementById('navbarLogout');
      
      if (currentUser) {
        if (loginNavItem && loginNavItem.parentElement) {
          loginNavItem.parentElement.style.display = 'none';
        }
        if (logoutNavItem && logoutNavItem.parentElement) {
          logoutNavItem.parentElement.style.display = 'block';
        }
      } else {
        if (loginNavItem && loginNavItem.parentElement) {
          loginNavItem.parentElement.style.display = 'block';
        }
        if (logoutNavItem && logoutNavItem.parentElement) {
          logoutNavItem.parentElement.style.display = 'none';
        }
      }
    }
    
    function showMessage(message, type) {
      const alertDiv = document.createElement('div');
      alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
      alertDiv.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
      `;
      
      const container = document.querySelector('.dashboard-content .container');
      container.insertBefore(alertDiv, container.firstChild);
      
      setTimeout(() => {
        if (alertDiv.parentNode) {
          alertDiv.remove();
        }
      }, 5000);
    } 